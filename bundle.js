(()=>{"use strict";function e(e,t){const s=e<t,a=e>=t**2-t,i=e%t==0,r=(e+1)%t==0;return s&&i?"top-left":s&&r?"top-right":s?"top":a&&i?"bottom-left":a&&r?"bottom-right":a?"bottom":r?"right":i?"left":"center"}class t{constructor(e=[]){this.characters=e}add(e){this.characters.push(e)}addAll(e){this.characters.push(...e)}}class s{constructor(e,t="generic"){if(this.level=e,this.attack=0,this.defence=0,this.health=50,this.type=t,new.target===s)throw new Error("Cannot instantiate abstract class Character.")}}class a{constructor(e,t){if(!(e instanceof s))throw new Error("character must be instance of Character or its children");if("number"!=typeof t)throw new Error("position must be a number");this.character=e,this.position=t}}class i extends s{constructor(e){super(e,"swordsman"),this.attack=40,this.defence=10}}class r extends s{constructor(e){super(e,"bowman"),this.attack=25,this.defence=25}}class n extends s{constructor(e){super(e,"magician"),this.attack=10,this.defence=40}}class o{constructor(){this.level=1,this.theme="prairie",this.positions=[]}init(){this.level=1,this.theme="prairie",this.positions=[]}reset(){this.level=1,this.theme="prairie",this.positions=[]}}const l=new class{constructor(){this.boardSize=8,this.container=null,this.boardEl=null,this.cells=[],this.cellClickListeners=[],this.cellEnterListeners=[],this.cellLeaveListeners=[],this.newGameListeners=[],this.saveGameListeners=[],this.loadGameListeners=[],this.gameOver=!1,this.maxScore=0}bindToDOM(e){if(!(e instanceof HTMLElement))throw new Error("container is not HTMLElement");this.container=e}drawUi(t){this.checkBinding(),this.container.innerHTML='\n      <div class="controls">\n        <button data-id="action-restart" class="btn">New Game</button>\n        <button data-id="action-save" class="btn">Save Game</button>\n        <button data-id="action-load" class="btn">Load Game</button>\n      </div>\n      <div class="board-container">\n        <div data-id="board" class="board"></div>\n      </div>\n    ',this.newGameEl=this.container.querySelector("[data-id=action-restart]"),this.saveGameEl=this.container.querySelector("[data-id=action-save]"),this.loadGameEl=this.container.querySelector("[data-id=action-load]"),this.newGameEl.addEventListener("click",(e=>this.onNewGameClick(e))),this.saveGameEl.addEventListener("click",(e=>this.onSaveGameClick(e))),this.loadGameEl.addEventListener("click",(e=>this.onLoadGameClick(e))),this.boardEl=this.container.querySelector("[data-id=board]"),this.boardEl.classList.add(t);for(let t=0;t<this.boardSize**2;t+=1){const s=document.createElement("div");s.classList.add("cell","map-tile",`map-tile-${e(t,this.boardSize)}`),s.addEventListener("mouseenter",(e=>this.onCellEnter(e))),s.addEventListener("mouseleave",(e=>this.onCellLeave(e))),s.addEventListener("click",(e=>this.onCellClick(e))),this.boardEl.appendChild(s)}this.cells=Array.from(this.boardEl.children)}redrawPositions(e){for(const e of this.cells)e.innerHTML="";for(const s of e){const e=this.boardEl.children[s.position],a=document.createElement("div");a.classList.add("character",s.character.type);const i=document.createElement("div");i.classList.add("health-level");const r=document.createElement("div");r.classList.add("health-level-indicator","health-level-indicator-"+((t=s.character.health)<15?"critical":t<50?"normal":"high")),r.style.width=`${s.character.health}%`,i.appendChild(r),a.appendChild(i),e.appendChild(a)}var t}addCellEnterListener(e){this.cellEnterListeners.push(e)}addCellLeaveListener(e){this.cellLeaveListeners.push(e)}addCellClickListener(e){this.cellClickListeners.push(e)}addNewGameListener(e){this.newGameListeners.push(e)}addSaveGameListener(e){this.saveGameListeners.push(e)}addLoadGameListener(e){this.loadGameListeners.push(e)}onCellEnter(e){if(!this.gameOver){const t=Array.from(this.boardEl.children).indexOf(e.currentTarget);for(const e of this.cellEnterListeners)e(t)}}onCellLeave(e){if(!this.gameOver){const t=Array.from(this.boardEl.children).indexOf(e.currentTarget);for(const e of this.cellLeaveListeners)e(t)}}onCellClick(e){if(!this.gameOver){const t=Array.from(this.boardEl.children).indexOf(e.currentTarget);for(const e of this.cellClickListeners)e(t)}}onNewGameClick(e){if(e.preventDefault(),this.gameOver)for(const e of this.newGameListeners)e()}onSaveGameClick(e){e.preventDefault();for(const e of this.saveGameListeners)e()}onLoadGameClick(e){e.preventDefault();for(const e of this.loadGameListeners)e()}checkBinding(){if(!this.container)throw new Error("GamePlay not bind to DOM")}saveMaxScore(){localStorage.setItem("maxScore",this.maxScore.toString())}loadMaxScore(){const e=localStorage.getItem("maxScore");null!==e&&(this.maxScore=parseInt(e,10))}};l.bindToDOM(document.querySelector("#game-container"));const c=new class{constructor(e){this.storage=e||localStorage}save(e){try{const t=JSON.stringify(e);this.storage.setItem("state",t),console.log("Game state saved successfully.")}catch(e){console.log("Failed to save game state:",e)}}load(){try{const e=this.storage.getItem("state");if(e){const t=JSON.parse(e);return console.log("Game state loaded successfully."),t}}catch(e){console.error("Failed to load game state:",e)}throw new Error("Invalid state")}}(localStorage),h=new class{constructor(e,t){this.selectedCharacter=null,this.gamePlay=e,this.stateService=t,this.columnIndices={player:[0,1],enemy:[this.gamePlay.boardSize-2,this.gamePlay.boardSize-1]},this.gameState=new o,this.currentPlayerIndex=0,this.selectedCharacter=null}init(){this.gameState.init(),this.gamePlay.drawUi(this.gameState.theme),this.gamePlay.addCellEnterListener(this.onCellEnter.bind(this)),this.gamePlay.addCellLeaveListener(this.onCellLeave.bind(this)),this.gamePlay.addCellClickListener(this.onCellClick.bind(this))}onCellEnter(e){const t=this.gameState.positions[e];if(t&&t.character.player){if(t!==this.selectedCharacter)return;this.gamePlay.setCursor("pointer")}else if(this.selectedCharacter){const{position:t}=this.selectedCharacter;this.getAllowedMoves(t).includes(e)?(this.gamePlay.selectCell(e,"green"),this.gamePlay.setCursor("pointer")):this.gamePlay.setCursor("notallowed")}}onCellLeave(e){const t=this.gameState.positions[e];if(t&&t.character.player){if(t!==this.selectedCharacter)return;this.gamePlay.setCursor("pointer")}else if(this.selectedCharacter){const{position:t}=this.selectedCharacter;this.getAllowedMoves(t).includes(e)&&this.gamePlay.deselectCell(e),this.gamePlay.setCursor("auto")}}onCellClick(e){const t=this.gameState.positions[e];if(t&&t.character.player&&t!==this.selectedCharacter){if(this.selectedCharacter){const e=this.gameState.positions.findIndex((e=>e===this.selectedCharacter));this.gamePlay.deselectCell(e)}this.selectedCharacter=t,this.gamePlay.selectCell(e),this.gamePlay.setCursor("pointer")}else if(this.selectedCharacter){const{position:t}=this.selectedCharacter;this.getAllowedMoves(t).includes(e)?this.moveSelectedCharacter(e):this.gamePlay.showMessage("Invalid move!")}}createTooltipText(e,t,s,a){return`🎖${e} ⚔${t} 🛡${s} ❤${a}`}selectPlayerCharacter(e,t){if(this.selectedCharacter){const e=this.gameState.positions.findIndex((e=>e===this.selectedCharacter));this.gamePlay.deselectCell(e)}this.selectedCharacter=e,this.gamePlay.selectCell(t),this.gamePlay.setCursor("pointer")}getCharacterByIndex(e){return this.gameState.positions[e]}isPlayerCharacter(e){return e.character instanceof r||e.character instanceof i||e.character instanceof n}showError(e){this.gamePlay.showMessage(e)}startNewGame(){if(this.gameState.reset(),this.generateTeams(),this.gamePlay.redrawPositions(this.gameState.positions),this.selectedCharacter){const e=this.gameState.positions.findIndex((e=>e===this.selectedCharacter));this.gamePlay.deselectCell(e),this.selectedCharacter=null}}generateTeams(){const e=[r,i,n];this.playerTeam=this.generateTeam(e,3,3,"player"),this.enemyTeam=this.generateTeam(e,3,3,"enemy"),this.gameState.positions=[...this.playerTeam.characters.map((e=>new a(e,this.getRandomPosition("player")))),...this.enemyTeam.characters.map((e=>new a(e,this.getRandomPosition("enemy"))))]}generateTeam(e,s,i,r){const n=[],o=this.columnIndices[r];for(let t=0;t<i;t++){const t=new(0,e[Math.floor(Math.random()*e.length)])(Math.floor(Math.random()*s)+1),i=this.getRandomPosition(o),r=new a(t,i);n.push(r)}return new t(n)}getRandomPosition(e){const t=Math.floor(Math.random()*this.gamePlay.boardSize),s=e[Math.floor(Math.random()*e.length)];return t*this.gamePlay.boardSize+s}getAllowedMoves(e){const t=this.getCharacterByPosition(e),{type:s}=t.character;return"swordsman"===s||"skeleton"===s?this.getMovesInRadius(e,1):"bowman"===s||"vampire"===s?this.getMovesInRadius(e,2):"magician"===s||"demon"===s?this.getMovesInRadius(e,4):[]}toggleCurrentPlayer(){this.currentPlayerIndex=0===this.currentPlayerIndex?1:0}async moveSelectedCharacter(e){const{position:t}=this.selectedCharacter,s=this.getCharacterByIndex(e);s&&!this.isPlayerCharacter(s)?await this.attackEnemy(s):(this.selectedCharacter.position=e,this.gamePlay.deselectCell(t),this.gamePlay.redrawPositions(this.gameState.positions),this.toggleCurrentPlayer()),this.selectedCharacter=null,this.gamePlay.deselectCell(e),this.gamePlay.setCursor("auto")}async attackEnemy(e){const{character:t}=this.selectedCharacter;try{if(await t.attack(e.character),!e.character.isAlive()){const t=this.gameState.positions.findIndex((t=>t===e));this.gameState.positions.splice(t,1),this.gamePlay.deselectCell(t)}this.gamePlay.redrawPositions(this.gameState.positions),this.toggleCurrentPlayer()}catch(e){this.showError(e.message)}}}(l,c);h.init()})();